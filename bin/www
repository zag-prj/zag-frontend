#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');

/**
 * Get port from environment and store in Express.
 */

// Get port from environment

require("dotenv").config();
var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);



/**
 * Check if SSL certificate files exist.
 */

var sslOptions = {};
var sslEnabled = false;

try {
  console.log("Checking if SSL key files exist");
  sslOptions.key = fs.readFileSync(path.join(__dirname, '..', 'ssl', 'localhost-key.pem'));
  console.log("Ok\nChecking if SSL certificate files exist");
  sslOptions.cert = fs.readFileSync(path.join(__dirname, '..', 'ssl', 'localhost.pem'));
  console.log('Ok\nSSL Certificate files exist. HTTPS is enabled');
  sslEnabled = true;
} catch (error) {
  console.warn('SSL certificate files not found. HTTPS will not be enabled.');
  console.warn('Consider applying Certificate for a secure connection');
}


/**
 * Create HTTP server.
 */
if (sslEnabled) {
  var server = https.createServer(sslOptions, app);
}
else {
  var server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 *
 * @param {string|number} val - The value to normalize.
 * @returns {string|number|boolean} - The normalized port.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 *
 * @param {Error} error - The error object.
 */

function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }

    var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
    debug("Listening on " + bind);

  // Show protocol based on SSL availability
  const protocol = sslEnabled ? 'https' : 'http';
  console.log(`Server is running at ${protocol}://localhost:${port}`);
}
